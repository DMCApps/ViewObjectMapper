package com.github.dmcapps.viewobjectmapper.core;

import android.util.Log;
import android.view.View;

import com.github.dmcapps.viewobjectmapper.core.annotations.ViewMapped;
import com.github.dmcapps.viewobjectmapper.utils.ResourceUtil;
import com.google.common.base.CaseFormat;

import java.lang.reflect.Field;

/**
 * Created by DCarmo on 16-08-17.
 */
public final class ViewObjectMapper {
    private static final String TAG = ViewObjectMapper.class.getSimpleName();

    private static Class<?> mResIdClass;

    /**
     * One time set up when using the {@link ViewObjectMapper#mapObjectToView(Object, View)} method
     * to map the view to the object. This is the R.id.class that must be set so that we have access to
     * your autogenerated R file for reflection
     *
     * @param
     *      resIdClass -> R.id.class so that we have access to your autogenerated class.
     */
    public static void setUpResourceIdClass(Class<?> resIdClass) {
        mResIdClass = resIdClass;
    }

    public static void mapObjectToView(Object object, View mainView) {
        Class<?> clazz = object.getClass();
        while (clazz != null && !clazz.getName().startsWith("android")) {
            final Field[] fields = clazz.getDeclaredFields();
            for (Field field : fields) {
                if (field.isAnnotationPresent(ViewMapped.class)) {
                    mapObjectToView(mainView, object, field);
                }
            }
            clazz = clazz.getSuperclass();
        }
    }

    private static void mapObjectToView(View mainView, Object object, Field field) {
        final ViewMapped annotation = field.getAnnotation(ViewMapped.class);
        int resId = annotation.value();

        if (resId == Integer.MIN_VALUE) {
            if (mResIdClass == null) {
                throw new RuntimeException("In order to use the mapObjectToView(Object, View) auto mapping feature you MUST class setUpResourceIdClass to give us your R.id.class!");
            }

            resId = resIdFromField(field);
        }

        setViewWithResIdToObjectField(mainView, resId, object, field);

    }

    private static int resIdFromField(Field field) {
        String fieldName = field.getName();
        String searchResName = CaseFormat.UPPER_CAMEL.to(CaseFormat.LOWER_UNDERSCORE, fieldName);
        // Check if the field name starts with m and trim it
        if (searchResName.startsWith("m_")) {
            searchResName = searchResName.substring(2);
        }
        int resId = ResourceUtil.getResId(searchResName, mResIdClass);

        if (resId == Integer.MIN_VALUE) {
            Log.e(TAG, "Unable to find view id for field named " + fieldName + " attempting to find R.id.class key " + searchResName);
        }

        return resId;
    }

    private static void setViewWithResIdToObjectField(View mainView, int resId, Object object, Field field) {
        View foundView = mainView.findViewById(resId);

        if (foundView == null) {
            Log.e(TAG, "Unable to find view with resource id " + resId + ". Mark with @NoViewMap annotation to prevent the parser for attempting to map the View or ViewGroup.");
        }
        else {
            try {
                field.setAccessible(true);
                field.set(object, foundView);
            } catch (Exception e) {
                throw new IllegalStateException(e);
            }
        }
    }
}
